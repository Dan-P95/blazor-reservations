@page "/"
@using System.Reflection.Metadata.Ecma335
@using ReservationsApp.Data
@using System.Diagnostics
@inject IConfiguration Config


<PageTitle>Index</PageTitle>

<style>
	body {
		background-image: url(/background1.jpeg);
		background-size: cover;
		background-repeat: no-repeat;
		
	}
</style>

<MudGrid>
	<MudItem xs="12" md="@sizing">
		<MudContainer Class="mt-6">
			<MudPaper Square="false" Class="pa-4" Elevation="16" Outlined="true" Style="@($"background:#FFEBEE;")">
					<MudTabs @ref="mainMudTabs" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
						<MudTabPanel Text="1. Billing">
							<MudGrid>
								<MudItem xs="12">
									<MudText Typo="Typo.h5" Align="Align.Center">Account Information</MudText>
									<MudDivider/>
								</MudItem>
								@*<MudItem xs="12">
									<MudButton OnClick="FillData">FILL</MudButton>
								</MudItem>*@
								<MudItem xs="12">
									<AddOwner CurrentOwner="CurrentOwner" AddNewOwnerCallback="AddNewOwner"></AddOwner>
								</MudItem>
							</MudGrid>
						</MudTabPanel>
						<MudTabPanel Text="2. Add Skiers" Disabled="secondTabDisabled" @ref="secondTabPanel">
							<MudGrid>
								<MudItem xs="12">
									<MudText Typo="Typo.h5" Align="Align.Center">Skier Information
									</MudText>
									<MudDivider/>
								</MudItem>
								<MudItem>
									<AddSkier CurrentSkier="CurrentSkier" AddNewSkierCallback="AddNewSkier"/>
								</MudItem>
								<MudItem xs="5">
									
								</MudItem>
								<MudItem xs="7" >
									<MudButton OnClick="enableThirdTab" Variant="Variant.Filled" Color="Color.Primary">Continue</MudButton>
								</MudItem>
								<MudItem xs="12">
									<MudDivider></MudDivider>
								</MudItem>
							</MudGrid>
						</MudTabPanel>
						<MudTabPanel Text="3. Finalize Reservation" Disabled="thirdTabDisabled" @ref="thirdTabPanel">
							<MudGrid>
								<MudItem xs="12">
									<MudText Typo="Typo.h5" Align="Align.Center">
										<Checkout CurrentOwner="CurrentOwner">

										</Checkout>
									</MudText>
								</MudItem>
								
								<MudItem xs="12">
									
								</MudItem>
							</MudGrid>
						</MudTabPanel>
					</MudTabs>
				</MudPaper>
		</MudContainer>
	</MudItem>
	<MudItem xs="12" md="4">
		<MudContainer Class="mt-6">
			<MudPaper Class="m-1">
				<div hidden="@secondTabDisabled">
					<MudText Typo="Typo.h6" Class="pa-1"><b>@CurrentOwner.FirstName @CurrentOwner.LastName's Skiers</b></MudText>
					
					<MudDynamicTabs MinimumTabWidth="20px" AddTabIcon="false" Border="true" Outlined="true" PanelClass="px-1 py-1" ApplyEffectsToContainer="true" @ref="secondaryMudTab" Position="Position.Left" CloseTab="DeleteSkierCallback">
						@if (CurrentOwner.SkierList.Count > 0)
						{
							@foreach (var skier in CurrentOwner.SkierList)
							{
								<MudTabPanel ID="skier.Name" Text="@skier.Name">
									<MudGrid>
										<MudItem xs="12">
											<MudPaper Class="pa-1" Outlined="true">
												<MudText>Age: <b>@skier.Age</b></MudText>
											</MudPaper>
											
										</MudItem>
										<MudItem xs="12">
										<MudPaper Class="pa-2" Outlined="true">
											<MudText>Height: <b>@skier.Height</b></MudText>
											
										</MudPaper>
										</MudItem>
										<MudItem xs="12">
											<MudPaper Class="pa-1" Outlined="true">
												<MudText>Weight: <b>@skier.Weight</b></MudText>
											</MudPaper>
											
										</MudItem>
										<MudItem xs="12">
											<MudPaper Class="pa-1" Outlined="true">
												<MudText>Type: <b>@skier.SkierType</b></MudText>
												
											</MudPaper>
										</MudItem>
										<MudItem xs="12">
											<MudPaper Class="pa-1" Outlined="true">
												<MudText>Shoe Size: <b>@skier.ShoeSize </b></MudText>
											</MudPaper>
											
										</MudItem>
										<MudItem xs="12">
											<MudPaper Class="pa-1" Outlined="true">
												@if (skier.Insurance == false)
												{
													<MudText>Insurance: No</MudText>
												}
												else
												{
													<MudText>Insurance: Yes</MudText>
												}
											</MudPaper>
											
										</MudItem>
										<MudItem xs="12">
											<MudPaper Class="pa-1" Outlined="true">
												<MudText>
													Package: <b>@skier.SkiPackage</b>
												</MudText>
											</MudPaper>
										</MudItem>
									</MudGrid>
								</MudTabPanel>
							}
						}
					</MudDynamicTabs>
				</div>
			</MudPaper>
		</MudContainer>
	</MudItem>

</MudGrid>


@code
{
	//[Inject] public Services services { get; set; }

	public Owner CurrentOwner = new Owner();
	private List<Skier> currentSkiers = new List<Skier>();
	public Skier CurrentSkier = new Skier();
	private DateRange dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);

	public AddSkier AddSkierComponent = new AddSkier();
	public MudTabs mainMudTabs;
	public MudTabPanel secondTabPanel;
	public MudTabPanel thirdTabPanel;
	public MudDynamicTabs secondaryMudTab;

	public int spacer1 = 3;
	public bool secondTabDisabled = true;
	public bool thirdTabDisabled = true;
	public IMask emailMask = RegexMask.Email();

	public List<Skier> skierList = new List<Skier>();
	bool success;
	bool alert;
	bool worked;
	int groupId;
	string message = string.Empty;
	int itemId;
	int sizing = 12;

	public void AddNewSkier()
	{
		UpdateSkierList();
		CurrentSkier = new Skier();
		//sizing = 8;
		//secondTabDisabled = false;
	}
	public void AddNewOwner()
	{
		enableSecondTab();
	}

	public void DeleteSkier(string name)
	{
		var thisSkier = CurrentOwner.SkierList.SingleOrDefault(n => Equals(n.Name, name));

		var skierList = CurrentOwner.SkierList;

		if (thisSkier != null)
		{
			skierList.Remove(thisSkier);
			
		}
		CurrentOwner.SkierList = skierList;
		StateHasChanged();

	}

	void DeleteSkierCallback(MudTabPanel panel) => DeleteSkier((string)panel.ID);

	public void UpdateSkierList()
	{

		skierList.Add(new Skier()
		{
			Name = CurrentSkier.Name,
			Age = CurrentSkier.Age,
			Height = CurrentSkier.Height,
			Insurance = CurrentSkier.Insurance,
			ShoeSize = CurrentSkier.ShoeSize,
			SkierType = CurrentSkier.SkierType,
			Weight = CurrentSkier.Weight,
			SkiOrBoard = CurrentSkier.SkiOrBoard,
			SkiPackage = CurrentSkier.SkiPackage,
			DailyRentalPrice = CurrentSkier.DailyRentalPrice
		});

		CurrentOwner.SkierList = skierList;
	}

	void enableSecondTab()
	{
		sizing = 8;
		secondTabDisabled = false;
		secondTabPanel.Disabled = false;
		mainMudTabs.ActivatePanel(1);

	}

	public void enableThirdTab()
	{
		thirdTabPanel.Disabled = false;
		thirdTabDisabled = false;
		mainMudTabs.ActivatePanel(2);
	}
	
	protected override void OnInitialized()
	{
		base.OnInitialized();
		CurrentOwner.SkierList = currentSkiers;

	}

	public void FillData()
	{
		CurrentOwner.FirstName = "bob";
		CurrentOwner.LastName = "sagat";
		CurrentOwner.Phone = "42";
		CurrentOwner.Email = "email";
		CurrentOwner.Address = "address";
		CurrentOwner.State = "idaho";
		CurrentOwner.City = "city";
		CurrentOwner.Zipcode = "83333";
		CurrentOwner.SkiDateRange = new DateRange(DateTime.Now, DateTime.Now);
		StateHasChanged();
	}

}
